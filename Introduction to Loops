While Loop in C++:
int r0=0;
int r1=1;
while (r1 <= 10) {
  r0=r0+r1;
  r1=r1+1;
}

While Loop in Assembly:
expr = operand1 relational operator operand2
while_expr:
          cmp operand1, operand2
          b{condition code must inverse of the relational op} end_while_expr
          
          your loop body code here
          
          b while_expr
         
mov r0, #0
mov r1, #1
while_r1_le_10:
              cmp r1, #10
              bgt end_while_r1_le_10
              add r0,r0,r1
              add r1,#1
              b while_r1_le_10
while_r1_le_10

Do While Loops in Assembly:
do_expr:
  |
  loop body code
  |
  cmp operand1, operand2
  b{CC*} do expr
  
  |
  code after the do/while loop
  |
  
ASSEMBLY while loop:
.global main

.section .rodata
out_msg: .acsiz "Sum is %d\n"
.align 4
.text
main:
  mov r0, #0      // r0 holds the sum
  mov r1, #1      // r1 is loop counter initialized to 1
while_r0_le_10:
  cmp r0, #10     // compare r0 to 10
  ble end_while_r0_le_10 // if r0 <= 10, we're done with loop
  
  add r1, r1, r0  // r1 = r1 + r0
  add r0, #1      // r0++
  b while_r0_le_10 // branch back up to test r0 against 10 again
end_while_r0_le_10:

  push {lr}
  ldr r0, =out_msg
  bl printf
  pop {pc}
  
